传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。传送带上的第 i 个包裹的重量为 weights[i]。
每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。
返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。

示例 1：
输入：weights = [1,2,3,4,5,6,7,8,9,10], D = 5
输出：15
解释：
船舶最低载重 15 就能够在 5 天内送达所有包裹，如下所示：
第 1 天：1, 2, 3, 4, 5
第 2 天：6, 7
第 3 天：8
第 4 天：9
第 5 天：10
请注意，货物必须按照给定的顺序装运，因此使用载重能力为 14 的船舶并将包装分成 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) 是不允许的。

#solutions
#二分查找
根据题意，结果一定落在【max(weights), sum(weights）】这个区间之间，因为左端点对应每天一条船，右端点对应只有一条超级大船。 
然后利用二分法，每一次循环模拟运货的过程，然后根据需要的天数与 输入 D 的关系来调整区间左右端点。
class Solution {
public:
    int shipWithinDays(vector<int>& weights, int D) {
        int left=0, right=0;
        for (int i=0; i<weights.size(); ++i)
        {
            if (weights[i]>left) left=weights[i];
            right += weights[i];
        }
        while (left<right)
        {
            int mid=left+(right-left)/2;
            
            int temp=0, days=1;
            for (int i=0; i<weights.size(); ++i)
            {
                temp += weights[i];
                if (temp>mid)
                {
                    temp=weights[i];
                    ++days;
                }
            }
            if (days>D)
                left=mid+1;
            else
                right=mid;
        }
        return left;
    }
};

执行用时 :108 ms, 在所有 C++ 提交中击败了12.88%的用户
内存消耗 :12 MB, 在所有 C++ 提交中击败了25.82%的用户
