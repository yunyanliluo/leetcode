Longest Palindromic Subsequence
最长回文子序列
可以假设s的最大长度为1000。
示例 1:
输入:"bbbab"
输出:4
一个可能的最长回文子序列为 "bbbb"。

#solutions
#dp
#时间复杂度O（n^2），空间复杂度O（n^2）
链接：https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/dong-tai-gui-hua-si-yao-su-by-a380922457-3/
解题思路：动态规划四要素
1°状态
f[i][j] 表示 s 的第 i 个字符到第 j 个字符组成的子串中，最长的回文序列长度是多少。
2°转移方程
如果 s 的第 i 个字符和第 j 个字符相同的话 f[i][j] = f[i + 1][j - 1] + 2
如果 s 的第 i 个字符和第 j 个字符不同的话 f[i][j] = max(f[i + 1][j], f[i][j - 1])
然后注意遍历顺序，i 从最后一个字符开始往前遍历，j 从 i + 1 开始往后遍历，这样可以保证每个子问题都已经算好了。
3°初始化
f[i][i] = 1 单个字符的最长回文序列是 1
4°结果
f[0][n - 1]
#my C++ code 
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        if (s=="") return 0;
        int n=s.length();
        /*f[i][j] represents the maximum length of palindromic subsequence from s[i] to s[j]*/
        int f[n][n]={0}; //initial value is zero
        for (int i=n-1; i>=0; --i)
        {
            f[i][i]=1;
            for (int j=i+1; j<n; ++j)
            {
                if (s[i]==s[j])
                {
                    f[i][j]=f[i+1][j-1]+2;
                }
                else
                {
                    f[i][j]=max(f[i+1][j], f[i][j-1]);
                }
            }
        }
        return f[0][n-1];
    }
};
执行用时 :136 ms, 在所有 C++ 提交中击败了45.71%的用户
内存消耗 :12.8 MB, 在所有 C++ 提交中击败了84.09%的用户
