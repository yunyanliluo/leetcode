Find Peak Element
寻找峰值
给一个数组nums，其中 nums[i] ≠ nums[i+1]，返回任一个峰值元素的数组下标。峰值元素是指其值大于左右相邻值的元素。假设 nums[-1] = nums[n] = -∞。

#my answer
#顺序遍历
时间复杂度O（n），空间复杂度O（1）。
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if (nums.size()==0) return -1;
        else if (nums.size()==1||nums[0]>nums[1]) return 0;
        else if (nums.back()>nums[nums.size()-2]) return nums.size()-1;
        int mid=1;
        while (mid<nums.size()-1) 
        {
            while (nums[mid-1]>nums[mid])  ++mid;
            if (mid<nums.size()-1&&nums[mid]>nums[mid+1]) return mid;
            ++mid;
        }
        return -1;
    }
};
执行用时 :16 ms, 在所有 C++ 提交中击败了7.15%的用户
内存消耗 :8.7 MB, 在所有 C++ 提交中击败了68.06%的用户

#solutions
#二分查找
参考链接：https://leetcode-cn.com/problems/find-peak-element/solution/hua-jie-suan-fa-162-xun-zhao-feng-zhi-by-guanpengc/
首先要注意题目条件，在题目描述中出现了 nums[-1] = nums[n] = -∞，这就代表着 只要数组中存在一个元素比相邻元素大，那么沿着它一定可以找到一个峰值。
根据上述结论，我们就可以使用二分查找找到峰值：
查找时，左指针 l，右指针 r，以其保持左右顺序为循环条件；
根据左右指针计算中间位置 m，并比较 m 与 m+1 的值，如果 m 较大，则左侧存在峰值，r = m，如果 m + 1 较大，则右侧存在峰值，l = m + 1。
时间复杂度O（logn），空间复杂度O（1）。
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        if (nums.size()==0) return -1;
        int l=0, r=nums.size()-1;
        while (l<r) 
        {
            int m=l+(r-l)/2;
            if (nums[m]>nums[m+1])
                r=m;
            else
                l=m+1;
        }
        return l;
    }
};
执行用时 :12 ms, 在所有 C++ 提交中击败了28.55%的用户
内存消耗 :8.5 MB, 在所有 C++ 提交中击败了87.35%的用户
