Subsets
子集
给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。
解集不能包含重复的子集。

示例:
输入: nums = [1,2,3]
输出:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/subsets
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#solutions
#方法一 位运算
一共2^n个子集，可以用2^n个二进制数与这些子集一一对应起来
#时间复杂度O（n*2^n），空间复杂度O(n*2^n)
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        //位运算
        int n=nums.size();
        if (n==0) return {};
        int size=1<<n;//size=2^n;
        vector<vector<int>> res;
        for (int i=0; i<size; ++i)//以i的二进制形式表示集合中的元素 1表示元素在子数组中 0表示不在子数组中
        {
            vector<int> tempres;
            for (int j=0, k=1; j<n; ++j, k<<=1)//k<<1表示k左移一位但是不给k赋值，k<<=1等价于k=k<<1
            {
                if ((k&i)!=0)//k&i必须加括号，!=比&的优先级高
                {
                    tempres.push_back(nums[j]);
                }
            }
            res.push_back(tempres);
        }
        return  res;
    }
};
执行用时 :8 ms, 在所有 C++ 提交中击败了91.11%的用户
内存消耗 :9.2 MB, 在所有 C++ 提交中击败了42.79%的用户

#方法二 DP
集合{1,2}的所有子集为{}，{1}，{2}，{1,2}，往每一个子集中添加元素3之后，变成了{3}，{1,3}，{2,3}，{1,2,3}，
这恰好是集合{1,2,3}的所有子集比集合{1,2}的所有子集增加的部分，上述两部分合在一起就是集合{1,2,3}的所有子集
因此，从空集开始，每次求出前n-1个数的子集，再求出前n个数的子集
#时间复杂度O(2^n)，空间复杂度O(n*2^n)
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        //动态规划
        int n=nums.size();
        if (n==0) return {};
        vector<vector<int>> res;
        vector<int> tempres;
        res.push_back({});
        for (int i=0; i<n; ++i)//每次添加一个新的元素nums[i]
        {
            int size=res.size();//每次向res添加size个新的子集合tempres
            for (int j=0; j<size; ++j)
            {
                tempres=res[j];
                tempres.push_back(nums[i]);
                res.push_back(tempres);
            }
        }
        return  res;
    }
};
执行用时 :12 ms, 在所有 C++ 提交中击败了66.08%的用户
内存消耗 :9 MB, 在所有 C++ 提交中击败了84.04%的用户

#方法三 回溯法
从空集开始，先将当前集合加入解集数组，然后按顺序添加一个新元素到当前解，回溯（以递归为方式）。
#时间复杂度O(2^n)，空间复杂度O(n*2^n)
class Solution {
public:
    void BackTrack(vector<int>& nums, int pos, vector<int>& tempres, vector<vector<int>>& res)
    {
        res.push_back(tempres);//当前子集加入解集中
        for (int i=pos; i<nums.size(); ++i)
        {
            tempres.push_back(nums[i]);
            BackTrack(nums, i+1, tempres, res);//从nums数组中下一个位置开始回溯
            tempres.pop_back();//选择nums数组中下一个元素回溯之前应该回退
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        //回溯法
        if (nums.size()==0) return {};
        vector<vector<int>> res;
        vector<int> tempres;//当前解，初始化为空，可以加入解集数组
        BackTrack(nums, 0, tempres, res);//0表示从第一个元素开始回溯查找
        return res;
    }
};
执行用时 :12 ms, 在所有 C++ 提交中击败了66.08%的用户
内存消耗 :9 MB, 在所有 C++ 提交中击败了73.02%的用户
