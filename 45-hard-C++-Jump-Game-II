Jump Game II
跳跃游戏II

#my answer
#DP
自底向上，时间复杂度O（n*n），空间复杂度O（n）
#结果：runtime error，测试样例里有25000
测试样例里有25000，本来dp数组初始值设置的9999根本不够，改为INT_MAX了
class Solution {
public:
    int jump(vector<int>& nums) {
        //思路：DP。自底向上，时间复杂度O（n*n），空间复杂度O（n）
        int n=nums.size();
        vector<int> dp(n,INT_MAX-1); //because you need to +1 later
        dp[n-1]=0;
        for(int i=n-2;i>=0;--i)
        {
            for(int j=nums[i];j>0;--j)
            {
                if(i+j>=n-1)
                {
                    dp[i]=1;
                    break;
                }
                if(dp[i+j]+1<dp[i])
                {
                    dp[i]=dp[i+j]+1;
                }
                
            }
        }
        return dp[0];
    }
};

#solutions
#贪心
时间复杂度O（n），空间复杂度O（1）
class Solution {
public:
    int jump(vector<int>& nums) {
        //思路：贪心：每次跳一步的时候，总是选择能够跳到更远位置的格子去跳
        int n=nums.size(),count=0;//测试样例包括n==1的情况
        for(int i=0;i<n-1;) //这里需要去掉i++，不然后面i+=temp会出错
        {
            int temp=0,tempjumpstep=0;
            for (int j=nums[i];j>0;--j)
            {
                if(i+j>=n-1)
                {
                    return count+1;//退出循环的条件
                }
                else if(nums[i+j]&&j+nums[i+j]>tempjumpstep)//第一次丢了nums[i+j]&&，忽略了跳到某处不能跳了的情况
                {
                    temp=j;tempjumpstep=j+nums[i+j];
                }
            }
            i+=temp;
            ++count;
        }
        return count;
    }
};
执行用时 :12 ms, 在所有 C++ 提交中击败了88.00%的用户
内存消耗 :10.1 MB, 在所有 C++ 提交中击败了77.21%的用户

#贪心方法2
时间复杂度O（n*n），空间复杂度O（1）
链接：https://leetcode-cn.com/problems/jump-game-ii/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-10/
我们知道最终要到达最后一个位置，然后我们找前一个位置，遍历数组，找到能到达它的位置，离它最远的就是要找的位置。
然后继续找上上个位置，最后到了第 0 个位置就结束了。
至于离它最远的位置，其实我们从左到右遍历数组，第一个满足的位置就是我们要找的。
#java code
public int jump(int[] nums) {
    int position = nums.length - 1; //要找的位置
    int steps = 0;
    while (position != 0) { //是否到了第 0 个位置
        for (int i = 0; i < position; i++) {
            if (nums[i] >= position - i) {
                position = i; //更新要找的位置
                steps++;
                break;
            }
        }
    }
    return steps;
}
