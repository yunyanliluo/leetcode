Repeated Substring Pattern
重复的子字符串
给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。

示例 1:
输入: "abab"
输出: True
解释: 可由子字符串 "ab" 重复两次构成。

示例 2:
输入: "aba"
输出: False

示例 3:
输入: "abcabcabcabc"
输出: True
解释: 可由子字符串 "abc" 重复四次构成。 (或者子字符串 "abcabc" 重复两次构成。)

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/repeated-substring-pattern
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#my answer
对i从len/2到1进行遍历，当len%i==0时，也就是i为len的因数时，可以检查字符串是否为子串所构成，检查有两种方式：
    （1）设定i,j=len/i,k,l,用双重循环检查s[i*k+l]=?=s[l](0<=l<i, 0<=k<j)
    （2）tmps="",for(int j=0;j<len/2;++j) tmps+=s.substr(0,i); 然后if(tmps==s) return true;

#solutions
方法一.上述（2）
#又慢(因子之和O(n^2))、内存O(n)又大
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int len=s.length();
        for (int sublen=1; sublen<=len/2; ++sublen)
        {
            if (len%sublen) continue;
            string tmps="";
            for (int i=0; i<len/sublen; ++i) tmps+=s.substr(0,sublen);
            if (s==tmps) return true;
        }
        return false;
    }
};
执行用时 :160 ms, 在所有 C++ 提交中击败了11.42%的用户
内存消耗 :126.5 MB, 在所有 C++ 提交中击败了22.03%的用户

#方法二.设定sublen表示子串长度（周期），对每个sublen值进行遍历看是否真的满足周期为sublen。
数学中周期的表达式是f(x+t)=f(x)，代码中可以这样写s[i]==s[i%sublen]
s[i]==s[i%sublen]的这种表达非常好
#时间O(n^2)、空间O(1)均较优
#my C++ code
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int len=s.length();
        for (int sublen=1; sublen<=len/2; ++sublen)
        {
            if (len%sublen) continue;
            int i=0;
            while (i<len&&s[i]==s[i%sublen]) ++i;
            if (i==len) return true;
        }
        return false;
    }
};
执行用时 :52 ms, 在所有 C++ 提交中击败了47.85%的用户
内存消耗 :11.6 MB, 在所有 C++ 提交中击败了93.22%的用户
