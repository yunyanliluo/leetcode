Next Permutation
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/next-permutation
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#my answer
#字典序
从右往左找到第一个nums[i-1]<nums[i]，从i开始向右找最后一个nums[j]>=nums[i-1]，交换nums[i-1],nums[j]，然后将nums[i]至nums[n-1]反转。
#On, O1
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        // 1 2 5 4 1
        // 1 4 1 2 5
        // 1 2 3 3 2
        // 1 3 2 2 3
        int n=nums.size();
        if(n==0) return;
        int i;
        for(i=n-1;i>0;--i)
        {
            if(nums[i-1]<nums[i])
                break;
        }
        if(i==0){
            //倒序输出
            for(int j=0,i=n-1;j<i;++j,--i)
            {
                swap(nums[j], nums[i]);
            }
            return;
        }
        int j=i-1;
        for(;i<n;++i)
        {
            if(nums[i]<=nums[j])
                break;
        }
        --i;
        swap(nums[i], nums[j]);
        //倒序输出[j+1, n-1]
        for(++j,i=n-1;j<i;++j,--i)
        {
            swap(nums[j], nums[i]);
        }
    }
};
执行用时 :12 ms, 在所有 cpp 提交中击败了77.26%的用户
内存消耗 :8.7 MB, 在所有 cpp 提交中击败了81.04%的用户

#一个更具有逻辑性的java code（一模一样的方法）
public class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    private void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

作者：LeetCode
链接：https://leetcode-cn.com/problems/next-permutation/solution/xia-yi-ge-pai-lie-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
