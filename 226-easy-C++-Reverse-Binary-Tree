Reverse Binary Tree
翻转二叉树
镜面翻转。
https://leetcode-cn.com/problems/invert-binary-tree/

#my answer
#递归法
时间On,空间最坏On
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL) return NULL;
        mirrorChange(root->left, root->right);
        return root;
    }
    void mirrorChange(TreeNode* &t1, TreeNode* &t2)//传t1，t1压栈，如果使用t1->来修改的值是可以的，但是使用t1=来修改是改不了的。所以使用&。
    {
        TreeNode* tmp=t1;
        t1=t2;
        t2=tmp;
        if(t1!=NULL) mirrorChange(t1->left,t1->right);
        if(t2!=NULL) mirrorChange(t2->left,t2->right);
        return;
    }
};
执行用时 :4 ms, 在所有 C++ 提交中击败了81.57%的用户
内存消耗 :8.9 MB, 在所有 C++ 提交中击败了96.85%的用户
注：传引用比较快。所以比写法2快。

写法2.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL) return NULL;
        mirrorChange(root);
        return root;
    }
    void mirrorChange(TreeNode* r)
    {
        TreeNode* tmp=r->left;
        r->left=r->right;
        r->right=tmp;
        if(r->left!=NULL)  mirrorChange(r->left);
        if(r->right!=NULL)  mirrorChange(r->right);
        return;
    }
};
执行用时 :4 ms, 在所有 C++ 提交中击败了81.57%的用户
内存消耗 :9.1 MB, 在所有 C++ 提交中击败了37.89%的用户

方法2.迭代
链接：https://leetcode-cn.com/problems/invert-binary-tree/solution/fan-zhuan-er-cha-shu-by-leetcode/
使用队列+循环
#java code
public TreeNode invertTree(TreeNode root) {
    if (root == null) return null;
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.add(root);
    while (!queue.isEmpty()) {
        TreeNode current = queue.poll();
        TreeNode temp = current.left;
        current.left = current.right;
        current.right = temp;
        if (current.left != null) queue.add(current.left);
        if (current.right != null) queue.add(current.right);
    }
    return root;
}
