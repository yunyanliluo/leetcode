查找长度为n+1的数组里1,2,…,n里面唯一一个重复出现的数值。（可以重复出现很多次，但一定是唯一一个重复出现的数值）
要求数组不允许修改，时间复杂度小于O（n^2），空间O（1）。

#solutions

方法1.二分查找
与一般的二分查找题不同，这道题目我们可以对要定位的唯一重复的“数”做二分，而不是对数组的索引做二分。
要定位的“数”根据题意在 1 和 n 之间，每一次二分都可以将搜索区间缩小一半，直至搜索区间只含有一个数为止。

为了直观理解，可以以 [1, 2, 2, 3, 4, 5, 6, 7] 为例，这个数组一共有 8 个数，每个数都在 1 和 7 之间。
1 和 7 的中位数是 4，遍历整个数组，统计小于 4 的整数的个数，至多应该为 3 个，如果超过 3 个就说明重复的数存在于区间 [1,4)中；
否则，重复的数存在于区间 [4,7]中。这里小于 4 的整数有 4 个：它们是 1, 2, 2, 3，因此砍掉右半区间，连中位数也砍掉。
依次类推，最后区间越来越小，直到变成 1 个整数，这个整数就是我们要找的重复的数。

二分查找的时间复杂度为O(logn)，这道题目在一层遍历的循环内部使用二分查找，时间复杂度达到O（nlogn）。
只使用了常数级额外空间，空间复杂度为O（1）。
        
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size()-1;
        int left=0, right=n;
        while (left<right)
        {
            int mid=left+(right-left)/2;
            int count=0;
            for (int i=0; i<n+1; ++i)
            {
                if (nums[i]<=mid) ++count;
            }
            if (count<=mid)
            {
                left=mid+1;
            }
            else
                right=mid;
        }
        return left;
    }
};

执行用时 :16 ms, 在所有 C++ 提交中击败了65.37%的用户
内存消耗 :9.9 MB, 在所有 C++ 提交中击败了24.05%的用户

时间复杂度O（nlogn），空间O（1）。

【tricky】方法2.快慢指针
在这道题目中，使用数组中的值作为索引下标进行遍历，遍历的结果肯定是一个环（有一个重复元素），于是检测重复元素问题转换成检测环的入口。
为了找到环的入口，可以进行如下步骤：
（1）设置两个快慢指针， fast每次走两步，slow每次走一步，最终走了slow走了n步与fast相遇，fast走了2*n，
fast可能比slow多饶了环的i圈，得到环的周长为n/i；
（2）slow指针继续走, 且另设第三个指针每次走一步，两个指针必定在入口处相遇。
假设环的入口和起点的距离是m，当第三个指针走了m步到环的入口时，slow刚好走了n + m步，换句话说时饶了环i圈（环的周长为n/i）加m步（起点到入口的距离），
得到相遇的是环的入口，入口元素即为重复元素。

快慢指针的方法也称为弗洛伊德的乌龟和兔子（或称循环检测），兔子是快指针，乌龟是慢指针，兔子每次走两步，乌龟每次只走一步。

快慢指针的时间复杂度O（n），只用了常数级别额外空间，空间复杂度为O（1）。

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        //快慢指针
        int tortoise=nums[0], hare=nums[0];
        do
        {
            tortoise=nums[tortoise];
            hare=nums[nums[hare]];
        } while(tortoise!=hare);
        
        //寻找重复元素
        int ptr1=nums[0], ptr2=tortoise;
        while (ptr1!=ptr2)
        {
            ptr1=nums[ptr1];
            ptr2=nums[ptr2];
        }
        return ptr1;
    }
};

执行用时 :12 ms, 在所有 C++ 提交中击败了89.03%的用户
内存消耗 :9.9 MB, 在所有 C++ 提交中击败了27.22%的用户

时间复杂度O（n），空间复杂度O（1）。

【不满足题目的数组只读要求】方法3.排序
排序方法（1）如果对数字进行排序，则任何重复的数字都将与排序后的数组相邻。
链接：https://leetcode-cn.com/problems/two-sum/solution/xun-zhao-zhong-fu-shu-by-leetcode/
首先，我们对数组进行排序，然后将每个元素与前一个元素进行比较。因为数组中只有一个重复的元素，所以我们知道数组的长度至少为 2，
一旦找到重复的元素，我们就可以返回它。
#java code
class Solution {
    public int findDuplicate(vector<int> nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i-1]) {
                return nums[i];
            }
        }

        return -1;
    }
}
#my code - C++
class Solution {
    public int findDuplicate(vector<int> nums) {
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i-1]) {
                return nums[i];
            }
        }
        return -1;
    }
}
时间复杂度：O(nlgn)。排序调用在 C++ 和 Java 中花费 O(nlgn) 时间，因此它支配后续的线性扫描。
空间复杂度：O(1) (or O(n))，在这里，我们对 nums 进行排序，因此内存大小是常数级的。如果我们不能修改输入数组，
那么我们必须为 nums 复制生成一个副本并分配线性空间，然后对其进行排序。

排序方法（2）使用桶排序，当两个数发现要放在同一个地方的时候，就发现了这个重复的元素。
具体而言，我们从数组的第一个元素起，依次为每一个元素归位：找到以该元素数值为数组下标的位置，并将这两个元素交换；
交换之后，再为交换过来的元素归位……直到找到一个元素，即将归位的地方已经有一个元素，其数值与正在归位的元素数值相同，那么我们就找到了这个结果。

# C++ code
class Solution {
    public int findDuplicate(vector<int> nums) {
        int i=0;
        while (1)
        {
               if(nums[i]!=nums[nums[i]])
                    swap(nums[i], nums[nums[i]]);
                else
                    return nums[i];
        }
 return -1;
    }
}

时间复杂度：O(n)。桶排序花费 O(n) 时间。
空间复杂度：O(1)。我们对 nums 进行桶排序，内存大小是常数级的。

【不满足题目的空间要求】方法4.集合
链接：https://leetcode-cn.com/problems/two-sum/solution/xun-zhao-zhong-fu-shu-by-leetcode/
如果我们在数组上遍历时存储每个元素，我们可以在数组上遍历时简单地检查每个元素。
为了实现线性时间复杂性，我们需要能够在恒定时间内将元素插入数据结构（并查找它们）。unordered_set/hashset 很好地满足这些约束，
所以我们遍历数组并将每个元素插入 seen 中。在插入之前，我们检查它是否已经存在。如果是，那么我们找到了我们的结果，所以我们返回它。
#java code
class Solution {
    public int findDuplicate(int[] nums) {
        Set<Integer> seen = new HashSet<Integer>();
        for (int num : nums) {
            if (seen.contains(num)) {
                return num;
            }
            seen.add(num);
        }

        return -1;
    }
}
#my code -C++
class Solution {
    public int findDuplicate(int[] nums) {
        unordered_set<int> seen;
        for (int i=0; i<nums.size(); ++i) {
            if (seen.find(nums[i])!=seen.end()) {
                return num;
            }
            seen.insert(nums[i]);
        }
        return -1;
    }
}
时间复杂度：O(n)。C++ 和 Java 都依赖于底层的哈希表，所以插入和查找有固定的时间复杂度。因此，该算法是线性的，因为它由一个执行 N 次恒定工作的 for 
循环组成。
空间复杂度：O(n)，在最坏的情况下，重复元素出现两次，其中一次出现在数组索引 n-1 处。在这种情况下，seen 将包含 n-1 不同的值，因此将占用 O(n) 空间。
