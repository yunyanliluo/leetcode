#my answer

#solutions

1.从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个。【最佳】
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 1;
	int maj = nums[0];
	for (int i = 1; i < nums.size(); i++) {
		if (maj == nums[i])
			count++;
		else {
			count--;
			if (count == 0) {
				maj = nums[i + 1];
			}
		}
	}
	return maj;
    }
};

执行用时 :20 ms, 在所有 C++ 提交中击败了93.49%的用户
内存消耗 :11.1 MB, 在所有 C++ 提交中击败了76.48%的用户

2.使用一个栈，当栈空或者栈顶元素等于当前遍历数组元素，入栈，若不等则出栈，最后的栈顶元素便是所求解。
与方法1思路一样，但是时间和空间复杂度均增加。

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        stack<int> stk;
        for (int i=0; i<nums.size(); ++i)
        {
            if (stk.empty()||stk.top()==nums[i])
            {
                stk.push(nums[i]);
            }
            else
            {
                stk.pop();
            }
        }
        return stk.top();
    }
};

执行用时 :28 ms, 在所有 C++ 提交中击败了65.19%的用户
内存消耗 :11.5 MB, 在所有 C++ 提交中击败了5.08%的用户

vector<int>遍历的另一种写法：iterator（遍历速度加快）：
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        stack<int> stk;
        for (vector<int>::iterator it=nums.begin(); it!=nums.end(); ++it) //iterator的初始化和遍历写法。
        {
            if (stk.empty()||stk.top()==*it)
            {
                stk.push(*it); //iterator是指针，需要取*。
            }
            else
            {
                stk.pop();
            }
        }
        return stk.top();
    }
};

执行用时 :24 ms, 在所有 C++ 提交中击败了81.79%的用户
内存消耗 :11.6 MB, 在所有 C++ 提交中击败了5.08%的用户

3.先排序，再取最中间一个数。
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[nums.size()/2];
    }
};

执行用时 :32 ms, 在所有 C++ 提交中击败了54.79%的用户
内存消耗 :10.9 MB, 在所有 C++ 提交中击败了92.68%的用户【内存消耗最小】

#error code
之前的代码错误原因在return一行写成了：
return nums[(nums.size()+1)/2]; //nums的数组下标是从0至nums.size()-1，而不是1~nums.size()

