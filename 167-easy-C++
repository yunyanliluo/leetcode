#solutions

#头尾指针/对撞指针

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int head=0, tail=numbers.size()-1;
        while (head<tail)
        {
            int tmp=numbers[head]+numbers[tail];
            if (tmp==target) return {head+1, tail+1}; //vector[int]类型使用{}和，表示
            else if (tmp>target) --tail;
            else ++head;
        }
        return {};
    }
};

执行用时 :4 ms, 在所有 C++ 提交中击败了97.96%的用户
内存消耗 :9.3 MB, 在所有 C++ 提交中击败了92.28%的用户

这种写法没有考虑溢出的情况，若考虑numbers[head]+numbers[tail]溢出可以改为:
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int head=0, tail=numbers.size()-1;
        while (numbers[head]+numbers[tail]<0&&numbers[head]>0)//正数之和溢出判断
            --tail;
        while (numbers[head]+numbers[tail]>0&&numbers[tail]<0)//负数之和溢出判断
            ++head;
        while (head<tail)
        {
            int tmp=numbers[head]+numbers[tail];
            if (tmp==target) return {head+1, tail+1}; //vector[int]类型使用{}和，表示
            else if (tmp>target) --tail;
            else if (tmp<target) ++head;
        }
        return {-1,-1};
    }
};
用时击败81.30%的用户
