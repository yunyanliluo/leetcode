Unique Paths II
不同路径II
m x n 网格，网格中的障碍物和空位置分别用 1 和 0 来表示。从左上角到右下角将会有多少条不同的路径？
说明：m 和 n 的值均不超过 100。

#my answer
#dp - 二维数组
#时间复杂度O（mn），空间复杂度O（mn）（若在原数组上修改则空间复杂度O（1））
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(), n=m>0?obstacleGrid[0].size():0;
        if (m*n==0) return 0;
        long long int dp[m][n]; //测试样例中dp的相加出现了整型溢出
        dp[0][0]=1-obstacleGrid[0][0]; //原来的代码忽略了{{1}}出现而根本无路从起始点出发的情况
        for (int i=1; i<m; ++i)
        {
            if (obstacleGrid[i][0]==1) dp[i][0]=0;
            else dp[i][0]=dp[i-1][0];
        }
        for (int j=1; j<n; ++j)
        {
            if (obstacleGrid[0][j]==1) dp[0][j]=0;
            else dp[0][j]=dp[0][j-1];
        }
        for (int i=1; i<m; ++i)
        for (int j=1; j<n; ++j)
        {
            if (obstacleGrid[i][j]==1)
                dp[i][j]=0;
            else
                dp[i][j]=dp[i-1][j]+dp[i][j-1]; 
        }
        return dp[m-1][n-1];
    }
};
执行用时 :4 ms, 在所有 C++ 提交中击败了90.91%的用户
内存消耗 :9 MB, 在所有 C++ 提交中击败了87.93%的用户

#dp优化 - 一维数组
#时间复杂度O（mn），空间复杂度O（n）
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size(), n=m>0?obstacleGrid[0].size():0;
        if (m*n==0) return 0;
        long long int dp[n]; //dp的相加可能出现整型溢出
        dp[0]=1-obstacleGrid[0][0]; //忽略了{{1}}出现而根本无路从起始点出发的情况
        int left;
        for (int j=1; j<n; ++j)
        {
            if (obstacleGrid[0][j]==1) dp[j]=0;
            else dp[j]=dp[j-1];
        }
        for (int i=1; i<m; ++i)
        for (int j=0; j<n; ++j)
        {
            if (obstacleGrid[i][j]==1) dp[j]=0;
            else if (j!=0)
            {
                dp[j]=left+dp[j]; 
            }
            left=dp[j];
        }
        return dp[n-1];
    }
};
执行用时 :4 ms, 在所有 C++ 提交中击败了90.91%的用户
内存消耗 :9.1 MB, 在所有 C++ 提交中击败了73.28%的用户
