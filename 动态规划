动态规划

什么是动态规划（Dynamic Programming）？动态规划的意义是什么？
能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。

例如，如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候：
　　15=1×11+4×1 （贪心策略使用了5张钞票）
　　15=3×5 （正确的策略，只用3张钞票）
f(n)=min(f(n-1), f(n-5), f(n-11))+1
【无后效性】　　
一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。　　
要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。　　
“未来与过去无关”，这就是无后效性。　　
（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）
【最优子结构】　　
回顾我们对f(n)的定义：我们记“凑出n所需的最少钞票数量”为f(n).　　
f(n)的定义就已经蕴含了“最优”。利用w=14,10,4的最优解，我们即可算出w=15的最优解。　　
大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”。

设计DP算法，往往可以遵循DP三连：　　
我是谁？  ——设计状态，表示局面　　
我从哪里来？　　我要到哪里去？  ——设计转移　　
设计状态是DP的基础。接下来的设计转移，有两种方式：一种是考虑我从哪里来（本文之前提到的两个例子，都是在考虑“我从哪里来”）；
另一种是考虑我到哪里去，这常见于求出f(x)之后，更新能从x走到的一些解。　　
总而言之，“我从哪里来”和“我要到哪里去”只需要考虑清楚其中一个，就能设计出状态转移方程，从而写代码求解问题。
前者又称pull型的转移，后者又称push型的转移。（这两个词是 阮止雨 妹妹告诉我的，不知道源出处在哪）
作者：阮行止
链接：https://www.zhihu.com/question/23995189/answer/613096905


一个问题是该用递推、贪心、搜索还是动态规划，完全是由这个问题本身阶段间状态的转移方式决定的:
每个阶段只有一个状态->递推；
每个阶段的最优状态都是由上一个阶段的最优状态得到的->贪心；
每个阶段的最优状态是由之前所有阶段的状态的组合得到的->搜索；
每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的->动态规划。

每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到————这个性质叫做最优子结构；
而不管之前这个状态是如何得到的————这个性质叫做无后效性。
作者：王勐
链接：https://www.zhihu.com/question/23995189/answer/35429905


解题思路：动态规划四要素
例如221-medium-C++-Maximal-Square
1°状态
f[i][j] 表示 s 的第 i 个字符到第 j 个字符组成的子串中，最长的回文序列长度是多少。
2°转移方程
如果 s 的第 i 个字符和第 j 个字符相同的话 f[i][j] = f[i + 1][j - 1] + 2
如果 s 的第 i 个字符和第 j 个字符不同的话 f[i][j] = max(f[i + 1][j], f[i][j - 1])
然后注意遍历顺序，i 从最后一个字符开始往前遍历，j 从 i + 1 开始往后遍历，这样可以保证每个子问题都已经算好了。
3°初始化
f[i][i] = 1 单个字符的最长回文序列是 1
4°结果
f[0][n - 1]
链接：https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/dong-tai-gui-hua-si-yao-su-by-a380922457-3/


动态规划算法通常以自底向上的方式求解各子问题。


例题
516-medium-C++-Longest-Palindromic-Subsequence
221-medium-C++-Maximal-Square
72-hard-C++-Edit-Distance
120-medium-C++-Triangle
