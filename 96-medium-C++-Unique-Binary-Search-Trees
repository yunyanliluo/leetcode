Unique Binary Search Trees
Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/unique-binary-search-trees
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#my answer
#dp
#On^2,On
class Solution {
public:
    int numTrees(int n) {
        if(n<=1) return n>0?n:0;
        vector<int> dp;
        dp.push_back(1);
        dp.push_back(1);
        for(int i=2;i<=n;++i)
        {
            int temp=0;
            for(int j=0;j<i;++j)
            {
                int right=i-j-1;
                temp+=(dp[j]*dp[right]);
            }
            dp.push_back(temp);
        }
        return dp[n];
    }
};
执行用时 :4 ms, 在所有 cpp 提交中击败了69.92%的用户
内存消耗 :8.2 MB, 在所有 cpp 提交中击败了52.83%的用户

#solutions
#catalan
作者：LeetCode
链接：https://leetcode-cn.com/problems/unique-binary-search-trees/solution/bu-tong-de-er-cha-sou-suo-shu-by-leetcode/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
事实上 dp(n)函数的值被称为 卡塔兰数 C_n
#On,O1
#java code
class Solution {
  public int numTrees(int n) {
    // Note: we should use long here instead of int, otherwise overflow
    long C = 1;
    for (int i = 0; i < n; ++i) {
      C = C * 2 * (2 * i + 1) / (i + 2);
    }
    return (int) C;
  }
}
