长度为n的数组元素是从0,1，…，n之中选取的n个，找到数组缺失的一个元素。数组乱序。

#solutions

1.将元素数值与元素下标作一一对应进行归位
数组末尾添一个元素-1，从头遍历数组，元素数值与元素下标不等的时候则将该元素与以该元素为下标的数组元素交换，
直到当前元素为-1或者元素数值与元素下标相等时，按顺序处理数组下一个元素。直到遍历完数组每一个元素，-1所在的下标就是所求解。
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        nums.push_back(-1);
        int pos=0;
        for (int i=0; i<nums.size(); ++i)
        {
            while (nums[i]!=-1 && nums[i]!=i)
            {
                swap(nums[i], nums[nums[i]]);
            }
            if (nums[i]==-1)
                pos=i;
        }
        return pos;
    }
};

执行用时 :32 ms, 在所有 C++ 提交中击败了54.48%的用户
内存消耗 :10.2 MB, 在所有 C++ 提交中击败了5.95%的用户

时间复杂度：O(n)。
空间复杂度：O(1)。算法中只用到了 O(1) 的额外空间。

2.按位异或运算【最佳】
由于异或运算（XOR）满足结合律，并且对一个数进行两次完全相同的异或运算会得到原来的数，因此我们可以通过异或运算找到缺失的数字。
异或操作（^）是一种很好的方式，举个例子：
0 ^ 4 = 4
4 ^ 4 = 0
那么，就可以不用求和，直接使用异或运算^进行抵消，剩下的数字就是缺失的了。
再举个例子：1^1^2^2^3 = 3

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int loss_digit=nums.size();
        for (int i=0; i<nums.size(); ++i)
        {
            loss_digit ^= i;
            loss_digit ^= nums[i];
        }
        return loss_digit;
    }
};

执行用时 :32 ms, 在所有 C++ 提交中击败了54.48%的用户
内存消耗 :9.7 MB, 在所有 C++ 提交中击败了66.46%的用户

时间复杂度：O(n)。这里假设异或运算的时间复杂度是常数的，总共会进行 O(n) 次异或运算，因此总的时间复杂度为 O(n)。
空间复杂度：O(1)。算法中只用到了 O(1) 的额外空间，用来存储答案。

3.排序
方法太初级了，时间和空间复杂度均差。
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for (int i=0; i<nums.size(); ++i)
        {
            if (i!=nums[i])
                return i;
        }
        return nums.size();
    }
};

时间复杂度：O(nlogn)。由于排序的时间复杂度为 O(nlogn)，扫描数组的时间复杂度为 O(n)，因此总的时间复杂度为 O(nlogn)。
空间复杂度：O(1) 或 O(n)。空间复杂度取决于使用的排序算法，根据排序算法是否进行原地排序（即不使用额外的数组进行临时存储），空间复杂度为 O(1) 或 O(n)。

3.集合（unordered_set，原hash_set已经被废弃了）
将数组元素全部插入一个集合，然后查询集合是否含有0~n，若缺失一个数值则返回这个数值。

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        unordered_set<int> hs; //unordered_set在C++11代替了原hash_set
        for (vector<int>::iterator it=nums.begin(); it!=nums.end(); ++it)
        {
            hs.insert(*it);
        }
        for (int i=0; i<=nums.size(); ++i)
        {
            if (hs.find(i)==hs.end())
                return i;
        }
        return -1;
    }
};

执行用时 :104 ms, 在所有 C++ 提交中击败了5.06%的用户
内存消耗 :16.7 MB, 在所有 C++ 提交中击败了5.06%的用户

时间复杂度：O(n)。集合的插入操作的时间复杂度都是 O(1)，一共插入了 n 个数，时间复杂度为 O(n)。集合的查询操作的时间复杂度同样是 O(1)，最多查询 n+1 次，时间复杂度为 O(n)。因此总的时间复杂度为 O(n)。
空间复杂度：O(n)。集合中会存储 nn 个数，因此空间复杂度为 O(n)。

4.高斯求和
数组元素之和，与0+1+…+n之差即为所求解。
注：求和sum有溢出的风险。
时间复杂度：O(n)。求出数组中所有数的和的时间复杂度为 O(n)，高斯求和公式的时间复杂度为 O(1)，因此总的时间复杂度为 O(n)。
空间复杂度：O(1)。算法中只用到了 O(1) 的额外空间，用来存储答案。
