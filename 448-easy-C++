找到数组中没有出现的所有元素。
#my answer

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> disp_num;
        for (int i=0; i<nums.size(); ++i)
        {
            while (nums[i]!=i+1)
            {
                if(nums[i]!=nums[nums[i]-1])
                    swap(nums[i], nums[nums[i]-1]);
                else
                    break;
            }
        }
        for (int i=0; i<nums.size(); ++i)
        {
            if (nums[i]!=i+1)
                disp_num.push_back(i+1);
        }
        return disp_num;
    }
};

执行用时 :144 ms, 在所有 C++ 提交中击败了68.80%的用户
内存消耗 :14.9 MB, 在所有 C++ 提交中击败了76.10%的用户

时间复杂度O(n)，空间复杂度O(1)。

#unimproved code

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> disp_num;
        for (int i=0; i<nums.size(); ++i)
        {
            while (nums[i]!=-1 && nums[i]!=i+1) //设置-1增加了不必要的时间开销，可以直接去掉
            {
                if(nums[i]!=nums[nums[i]-1])
                    swap(nums[i], nums[nums[i]-1]);
                else
                    nums[i]=-1;
            }
        }
        for (int i=0; i<nums.size(); ++i)
        {
            if (nums[i]==-1)
                disp_num.push_back(i+1);
        }
        return disp_num;
    }
};

执行用时 :236 ms, 在所有 C++ 提交中击败了20.82%的用户
内存消耗 :14.8 MB, 在所有 C++ 提交中击败了82.87%的用户

时间复杂度O(n)，空间复杂度O(1)。

#solutions

方法2.遍历并在以元素数值为索引的位置让元素数值加n，遍历加n后的数组，若数组元素值小于等于n，则说明数组下标值不存在，即消失的数字

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> disp_num;
        int n=nums.size();
        for (int i=0; i<n; ++i)
        {
            int index=(nums[i]-1)%n;
            nums[index] += n;
        }
        for (int i=0; i<n; ++i)
        {
            if (nums[i]<=n)
                disp_num.push_back(i+1);
        }
        return disp_num;
    }
};

执行用时 :140 ms, 在所有 C++ 提交中击败了82.84%的用户
内存消耗 :14.7 MB, 在所有 C++ 提交中击败了96.41%的用户

时间复杂度O(n)，空间复杂度O(1)。
