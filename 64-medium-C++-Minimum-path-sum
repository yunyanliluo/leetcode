Minimum path sum
最小路径和
给m*n网格（非负），找出左上角至右下角的最短路径和。要求只能向下或向右走一步。

#solutions

方法一.
#dp - 二维动态规划
#时间复杂度O（m*n），空间复杂度O（m*n）
由于只能向下或向右移动，因此每一个格子的上一步应是左边格子右移或者上边格子下移，需要取最短。注意边界情况，最上边一行和最左边一行的格子，只能由左边或上边移动得到。
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        int dp[m][n];
        for (int i=0; i<m; ++i)
        for (int j=0; j<n; ++j)
        {
            if (i==0&&j==0) dp[i][j]=grid[i][j];
            else if (i==0&&j!=0) dp[i][j]=dp[i][j-1]+grid[i][j];
            else if (i!=0&&j==0) dp[i][j]=dp[i-1][j]+grid[i][j];
            else dp[i][j]=min(dp[i][j-1]+grid[i][j], dp[i-1][j]+grid[i][j]);
        }
        return dp[m-1][n-1];
    }
};
执行用时 :12 ms, 在所有 C++ 提交中击败了77.12%的用户
内存消耗 :10.6 MB, 在所有 C++ 提交中击败了90.13%的用户

也可以倒着来：
链接：https://leetcode-cn.com/problems/minimum-path-sum/solution/zui-xiao-lu-jing-he-by-leetcode/
dp(i,j) 表示从坐标 (i, j) 到右下角的最小路径权值。我们初始化右下角的 dp 值为对应的原矩阵值，然后去填整个矩阵，
对于每个元素考虑移动到右边或者下面，因此获得最小路径和。
我们有如下递推公式：dp(i,j)=grid(i,j)+min(dp(i+1,j),dp(i,j+1))。注意边界情况。
#java code
public class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        for (int i = grid.length - 1; i >= 0; i--) {
            for (int j = grid[0].length - 1; j >= 0; j--) {
                if(i == grid.length - 1 && j != grid[0].length - 1)
                    dp[i][j] = grid[i][j] +  dp[i][j + 1];
                else if(j == grid[0].length - 1 && i != grid.length - 1)
                    dp[i][j] = grid[i][j] + dp[i + 1][j];
                else if(j != grid[0].length - 1 && i != grid.length - 1)
                    dp[i][j] = grid[i][j] + Math.min(dp[i + 1][j], dp[i][j + 1]);
                else
                    dp[i][j] = grid[i][j];
            }
        }
        return dp[0][0];
    }
}

方法二.
#dp - 一维动态规划
#时间复杂度O（m*n），空间复杂度O（n）
链接：https://leetcode-cn.com/problems/minimum-path-sum/solution/zui-xiao-lu-jing-he-by-leetcode/
在上个解法中，我们可以用一个一维数组来代替二维数组，dp 数组的大小和行大小相同。这是因为对于某个固定状态，只需要考虑下方和右侧的节点。
首先初始化 dp 数组最后一个元素是右下角的元素值，然后我们向左移更新每个 dp(j) 为：dp(j)=grid(i,j)+min(dp(j),dp(j+1))
我们对于每一行都重复这个过程，然后向上一行移动，计算完成后 dp(0) 就是最后的结果。
#java code
public class Solution {
   public int minPathSum(int[][] grid) {
       int[] dp = new int[grid[0].length];
       for (int i = grid.length - 1; i >= 0; i--) {
           for (int j = grid[0].length - 1; j >= 0; j--) {
               if(i == grid.length - 1 && j != grid[0].length - 1)
                   dp[j] = grid[i][j] +  dp[j + 1];
               else if(j == grid[0].length - 1 && i != grid.length - 1)
                   dp[j] = grid[i][j] + dp[j];
               else if(j != grid[0].length - 1 && i != grid.length - 1)
                   dp[j] = grid[i][j] + Math.min(dp[j], dp[j + 1]);
               else
                   dp[j] = grid[i][j];
           }
       }
       return dp[0];
   }
}

方法三.
#dp - 不需要额外存储空间
#时间复杂度O（m*n），空间复杂度O（1）
链接：https://leetcode-cn.com/problems/minimum-path-sum/solution/zui-xiao-lu-jing-he-by-leetcode/
和方法二相同，惟一的区别是，在原数组上存储，这样就不需要额外的存储空间。
#java code
public class Solution {
    public int minPathSum(int[][] grid) {
        for (int i = grid.length - 1; i >= 0; i--) {
            for (int j = grid[0].length - 1; j >= 0; j--) {
                if(i == grid.length - 1 && j != grid[0].length - 1)
                    grid[i][j] = grid[i][j] +  grid[i][j + 1];
                else if(j == grid[0].length - 1 && i != grid.length - 1)
                    grid[i][j] = grid[i][j] + grid[i + 1][j];
                else if(j != grid[0].length - 1 && i != grid.length - 1)
                    grid[i][j] = grid[i][j] + Math.min(grid[i + 1][j],grid[i][j + 1]);
            }
        }
        return grid[0][0];
    }
}
#C++ code
链接：https://leetcode-cn.com/problems/minimum-path-sum/solution/c-dong-tai-gui-hua-4mschao-guo-99-by-lunatic-kalei/
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        if(n==0)
            return 0;
        int m = grid[0].size();
        if(m==0)
            return 0;
        for(int i=1;i<m;i++)
        {
            grid[0][i] += grid[0][i-1];

        }
        for(int i=1;i<n;i++)
        {
            grid[i][0] += grid[i-1][0];
        }
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                grid[i][j]+=min(grid[i-1][j],grid[i][j-1]);
            }
        }
        return grid[n-1][m-1];
    }
};

附：动态规划

作者：阮行止
链接：https://www.zhihu.com/question/23995189/answer/613096905
什么是动态规划（Dynamic Programming）？动态规划的意义是什么？
能将大问题拆成几个小问题，且满足无后效性、最优子结构性质。

例如，如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候：
　　15=1×11+4×1 （贪心策略使用了5张钞票）
　　15=3×5 （正确的策略，只用3张钞票）
f(n)=min(f(n-1), f(n-5), f(n-11))+1
【无后效性】　　
一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。　　
要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。　　
“未来与过去无关”，这就是无后效性。　　
（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）
【最优子结构】　　
回顾我们对f(n)的定义：我们记“凑出n所需的最少钞票数量”为f(n).　　
f(n)的定义就已经蕴含了“最优”。利用w=14,10,4的最优解，我们即可算出w=15的最优解。　　
大问题的最优解可以由小问题的最优解推出，这个性质叫做“最优子结构性质”。

设计DP算法，往往可以遵循DP三连：　　
我是谁？  ——设计状态，表示局面　　
我从哪里来？　　我要到哪里去？  ——设计转移　　
设计状态是DP的基础。接下来的设计转移，有两种方式：一种是考虑我从哪里来（本文之前提到的两个例子，都是在考虑“我从哪里来”）；
另一种是考虑我到哪里去，这常见于求出f(x)之后，更新能从x走到的一些解。　　
总而言之，“我从哪里来”和“我要到哪里去”只需要考虑清楚其中一个，就能设计出状态转移方程，从而写代码求解问题。
前者又称pull型的转移，后者又称push型的转移。（这两个词是 阮止雨 妹妹告诉我的，不知道源出处在哪）


作者：王勐
链接：https://www.zhihu.com/question/23995189/answer/35429905
一个问题是该用递推、贪心、搜索还是动态规划，完全是由这个问题本身阶段间状态的转移方式决定的:
每个阶段只有一个状态->递推；
每个阶段的最优状态都是由上一个阶段的最优状态得到的->贪心；
每个阶段的最优状态是由之前所有阶段的状态的组合得到的->搜索；
每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的->动态规划。

每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到————这个性质叫做最优子结构；
而不管之前这个状态是如何得到的————这个性质叫做无后效性。
