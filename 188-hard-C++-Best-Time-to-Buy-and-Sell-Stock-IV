Best Time to Buy and Sell Stock IV
买卖股票的最佳时机 IV
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

示例 2:
输入: [3,2,6,5,0,3], k = 2
输出: 7
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

## Lintcode 393 my answer
用hold[i][k],sold[i][k]分别表示第i天是持有状态、空仓状态，并且已经完成了k笔交易。在此我设定交易数以卖出股票数为准。
那么我最多买入k次，最多卖出k次，hold的k范围：0～k-1，sold的k范围：1～k
WA1:sold的k范围写错了
```C++
            for (int k = 0; k <= s_max; ++k) { // 这里写成了k=0开始，应该是k=1开始！k=0开始，下面有下标k-1越界！
                sold[i%2][k] = hold[(i-1)%2][k-1] + prices[i];
                if (k <= i/2) {
                    sold[i%2][k] = max(sold[(i-1)%2][k], sold[i%2][k]);
                }
            }
```
Memory LE：发现递推方程里i只依赖i-1，因此优化成滚动数组
```C++
            for (int k = 0; k < h_max; ++k) {
                hold[i%2][k] = sold[(i-1)%2][k] - prices[i];
                if (k < (i+1)/2) {
                    hold[i%2][k] = max(hold[i%2][k], hold[(i-1)%2][k]);
                }
            }
            for (int k = 1; k <= s_max; ++k) {
                sold[i%2][k] = hold[(i-1)%2][k-1] + prices[i];
                if (k <= i/2) {
                    sold[i%2][k] = max(sold[(i-1)%2][k], sold[i%2][k]);
                }
            }
```
Memory LE：发现还是MLE的原因是K=10^8，超内存了，于是考虑K非常大但是占用不必要空间的情况，优化K的范围
```C++
            int K_new = min(K, n / 2);
            vector<int> temp(K_new+1, 0);
            vector<vector<int>> hold(2, temp);
            vector<vector<int>> sold(2, temp);
```
Time LE：发现K=10^8这个testcase时间超了
但我没有办法了 我不改了

#my answer
#dp
更新了底下链接的详解的方法，将空间O(N*2*k)优化为了O(2*k)
注：从k到1进行反序遍历，目的是第i次迭代的时候所用到的原始值全部应该来自i-1次迭代的，
而且k对应的dp值涉及用到i-1次迭代中k-1的dp值，所以用k反序不需要暂存temp。假设k增序，则用到的就变成了i次迭代中的k-1的dp值。
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        if(k>n/2)
        {
            int dp_i_0=0,dp_i_1=INT_MIN;
            for(int i=0;i<n;++i)
            {
                int temp=dp_i_0;
                dp_i_0=max(dp_i_0,dp_i_1+prices[i]);
                dp_i_1=max(dp_i_1,temp-prices[i]);
            }
            return dp_i_0;
        }
        else
        {
            int dp_i_0[k+1],dp_i_1[k+1];
            for(int i=0;i<k+1;++i)
            {
                dp_i_0[i]=0;dp_i_1[i]=INT_MIN;
            }
            for(int i=0;i<n;++i)
            {
                for(int j=k;j>0;--j)
                {
                    dp_i_0[j]=max(dp_i_0[j],dp_i_1[j]+prices[i]);
                    dp_i_1[j]=max(dp_i_1[j],dp_i_0[j-1]-prices[i]);
                }
            }
            return dp_i_0[k];
        }
    }
};
执行用时 :8 ms, 在所有 C++ 提交中击败了92.69%的用户
内存消耗 :8.7 MB, 在所有 C++ 提交中击败了93.46%的用户

详解见https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-2/
